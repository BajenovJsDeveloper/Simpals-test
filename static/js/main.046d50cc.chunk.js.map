{"version":3,"sources":["Posts/Atricle/Article.jsx","Posts/Posts.jsx","Form/FormContainer.jsx","App.jsx","index.js"],"names":["Fragment","React","Article","id","title","body","tags","handleDeletePost","className","map","tag","key","onClick","e","Posts","props","postId","target","newPostData","state","posts","filter","post","setState","saveToLocaleStorage","article","localStorage","getItem","setItem","JSON","stringify","postsArray","parse","newPostsData","Math","max","this","Number","newArticle","getMaxId","push","wrapperAtricles","getArticles","Component","FormContainer","initialValues","validate","values","errors","trim","length","onSubmit","resetForm","split","handleAddPost","onSubmitHandle","touched","name","placeholder","type","App","addArticle","handleSaveToLocaleStorage","ReactDOM","render","document","getElementById"],"mappings":"k7HAEMA,EAASC,IAAMD,SAEN,SAASE,EAAT,GAAwD,IAAtCC,EAAqC,EAArCA,GAAGC,EAAkC,EAAlCA,MAAMC,EAA4B,EAA5BA,KAAKC,EAAuB,EAAvBA,KAAKC,EAAkB,EAAlBA,iBAEnD,OACG,kBAACP,EAAD,KACA,iCACC,gCACC,4BAAKI,IAEN,iCACE,2BAAIC,IAEN,gCACC,yBAAKG,UAAU,QACdF,EAAKG,KAAI,SAACC,EAAIP,GAAL,OAAU,4BAAQK,UAAU,yBAAyBG,IAAKR,GAAKO,QAG1E,yBAAKF,UAAU,YACb,4BAAQL,GAAIA,EAAIK,UAAU,0BAA0BI,QAAS,SAACC,GAAD,OAAKN,EAAiBM,KAAnF,iD,YCfDb,EAASC,IAAMD,SACAc,E,YACpB,WAAYC,GAAO,IAAD,8BACjB,4CAAMA,KA6BPR,iBAAiB,SAACM,GACjB,IAAIG,EAAOH,EAAEI,OAAOd,GAChBe,EAAY,EAAKC,MAAMC,MAAMC,QAAO,SAAAC,GAAI,OAAEA,EAAKnB,IAAIa,KACvD,EAAKO,SAAS,CAACH,MAAMF,IACrB,EAAKM,oBAAoBN,IAhCzB,EAAKO,QAAQ,KAG0B,OAApCC,aAAaC,QAAQ,cACpBD,aAAaE,QAAQ,YAAYC,KAAKC,UAAUC,IAEpD,EAAKZ,MAAM,CAACC,MAAMS,KAAKG,MAAMN,aAAaC,QAAQ,eARjC,E,yEAYNT,GAAa,IAAD,OACvB,OAAOA,EAAYT,KAAI,SAAAa,GACtB,OACE,kBAACpB,EAAD,CAAUE,MAAOkB,EAAKlB,MAClBO,IAAKW,EAAKnB,GACVA,GAAImB,EAAKnB,GACTE,KAAMiB,EAAKjB,KACXC,KAAMgB,EAAKhB,KACXC,iBAAkB,EAAKA,wB,0CAKV0B,GAClBP,aAAaE,QAAQ,YAAYC,KAAKC,UAAUG,M,iCAYlD,OAAOC,KAAKC,IAAL,MAAAD,KAAI,CAAK,GAAL,mBAAUE,KAAKjB,MAAMC,MAAMX,KAAI,SAAAgB,GAAO,OAAEY,OAAOZ,EAAQtB,Y,2CAIlE,IAAImC,EAAWF,KAAKrB,MAAMU,QACzB,GAAGa,IAAaF,KAAKX,QAAQ,CAC5B,IAAIP,EAAYkB,KAAKjB,MAAMC,MAC3BgB,KAAKX,QAAQa,EAEbA,EAAWnC,GAAGiC,KAAKG,WAAW,EAC9BrB,EAAYsB,KAAKF,GACjBF,KAAKb,SAAS,CAACH,MAAMF,IACrBkB,KAAKZ,oBAAoBN,M,+BAM3B,IAAIuB,EAAgBL,KAAKM,YAAYN,KAAKjB,MAAMC,OAChD,OACI,kBAAC,EAAD,KACDqB,O,GA5D8BxC,IAAM0C,W,OCJnC3C,EAASC,IAAMD,SAEN,SAAS4C,EAAc7B,GAStC,OACE,kBAAC,EAAD,KACI,kBAAC,IAAD,CAEE8B,cAAe,CAACzC,MAAO,GAAGC,KAAM,GAAGC,KAAM,IAEzCwC,SAAU,SAAAC,GACR,IAAMC,EAAS,GAYf,OAVND,EAAO3C,MAAM2C,EAAO3C,MAAM6C,OAC1BF,EAAO1C,KAAK0C,EAAO1C,KAAK4C,OACxBF,EAAOzC,KAAKyC,EAAOzC,KAAK2C,OAEdF,EAAO3C,MACH2C,EAAO3C,MAAM8C,OAAO,KAAKF,EAAO5C,MAAQ,sJAD7B4C,EAAO5C,MAAQ,kHAE9B2C,EAAO1C,KACH0C,EAAO1C,KAAK6C,OAAO,MAAMF,EAAO3C,KAAO,uJAD7B2C,EAAO3C,KAAO,kHAE5B0C,EAAOzC,KACHyC,EAAOzC,KAAK4C,OAAO,KAAKF,EAAO1C,KAAO,sJAD5B0C,EAAO1C,KAAO,kHAEzB0C,GAGTG,SAAU,SAACJ,EAAD,GAAyB,IAAhBK,EAAe,EAAfA,WA7BR,SAACL,GAClB,IAAIT,EAAW,CAAClC,MAAM2C,EAAO3C,MACtBC,KAAK0C,EAAO1C,KACZC,KAAKyC,EAAOzC,KAAK+C,MAAM,OAE9BtC,EAAMuC,cAAchB,GAwBqBiB,CAAeR,GAASK,OAE1D,gBAAGJ,EAAH,EAAGA,OAAQQ,EAAX,EAAWA,QAAX,OAKA,yBAAKrD,GAAG,WAAWK,UAAU,YAC5B,kBAAC,IAAD,KACC,yBAAKA,UAAU,cACb,kBAAC,IAAD,CAAOiD,KAAK,QAAQC,YAAY,yDAAYC,KAAK,OAAOnD,UAAU,iBAGhEwC,EAAO5C,OACPoD,EAAQpD,OACP,yBAAKI,UAAU,yCAAyCwC,EAAO5C,QAEpE,yBAAKI,UAAU,cACb,kBAAC,IAAD,CAAOiD,KAAK,OAAOC,YAAY,iCAAQC,KAAK,OAAOnD,UAAU,iBAC5DwC,EAAO3C,MACNmD,EAAQnD,MACP,yBAAKG,UAAU,yCAAyCwC,EAAO3C,OAGjE,yBAAKG,UAAU,cACf,kBAAC,IAAD,CAAOiD,KAAK,OAAOC,YAAY,4DAAeC,KAAK,OAAOnD,UAAU,iBACnEwC,EAAO1C,MACNkD,EAAQlD,MACR,yBAAKE,UAAU,yCAAyCwC,EAAO1C,OAGpE,4BAAQqD,KAAK,SAASnD,UAAU,mBAAhC,2DC7DX,IAAMR,EAASC,IAAMD,SAEA4D,E,YAEnB,WAAY7C,GAAO,IAAD,8BACjB,4CAAMA,KAIP8C,WAAW,SAACpC,GACX,EAAKF,SAAS,CAACE,aAJf,EAAKN,MAAM,CAACM,QAAQ,MAFH,E,sEAUjB,IAAIA,EAAQW,KAAKjB,MAAMM,QACvB,OACG,kBAAC,EAAD,KACG,iCACE,yBAAMtB,GAAG,QAAQK,UAAU,QAC1B,kBAAC,EAAD,CAAOiB,QAASA,EACZqC,0BAA2B1B,KAAK0B,6BAExC,kBAAClB,EAAD,CAAeU,cAAelB,KAAKyB,mB,GApBV5D,IAAM0C,WCJvCoB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.046d50cc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Fragment=React.Fragment;\r\n\r\nexport default function Article({id,title,body,tags,handleDeletePost}){\r\n\r\n\treturn (\r\n\t\t\t <Fragment>\r\n\t\t\t\t<article> \r\n\t\t\t\t\t<header>\r\n\t\t\t\t\t\t<h3>{title}</h3>\r\n\t\t\t\t\t</header>\r\n\t\t\t\t\t<section>\r\n\t\t\t\t\t \t<p>{body}</p>\r\n\t\t\t\t\t</section>\r\n\t\t\t\t\t<footer>\r\n\t\t\t\t\t\t<div className=\"tags\">\r\n\t\t\t\t\t\t{tags.map((tag,id)=><button className=\"btn btn-xs btn-default\" key={id}>{tag}</button>)}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</footer>\r\n\t\t\t\t\t<div className=\"controls\">\r\n\t\t\t\t\t\t\t<button id={id} className=\"btn btn-danger btn-mini\" onClick={(e)=>handleDeletePost(e)}>удалить</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</article>\r\n\t\t\t</Fragment>\r\n\t\t);\r\n};\r\n\r\n","import React from 'react';\r\nimport Article from './Atricle/Article.jsx'\r\nimport postsArray from './posts.json';\r\n\r\n\r\n\r\nconst Fragment=React.Fragment;\r\nexport default class Posts extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.article=null;\r\n\t\t//----initialize LocalStorage with posts \r\n\t\t//--- if no data in localStorage, save data to localStorage from post.json file\r\n\t\tif(localStorage.getItem('userPosts')===null)\r\n\t\t  \t\tlocalStorage.setItem('userPosts',JSON.stringify(postsArray));\r\n\t\t//---- reading data from localStorage userPosts\r\n\t\tthis.state={posts:JSON.parse(localStorage.getItem('userPosts'))};\r\n\t\t// console.log('rerender');\r\n\t}\r\n\t//--- generating  new list of Articles  from newPostData\r\n\tgetArticles(newPostData){\r\n\t\treturn newPostData.map(post=>{\r\n\t\t\treturn(\r\n\t\t\t\t\t<Article  title={post.title}\r\n\t\t\t\t\t\t\t  key={post.id}\r\n\t\t\t\t\t\t\t  id={post.id}\r\n\t\t\t\t\t\t\t  body={post.body}\r\n\t\t\t\t\t\t\t  tags={post.tags}\r\n\t\t\t\t\t\t\t  handleDeletePost={this.handleDeletePost}/>\r\n\t\t\t\t)\r\n\t\t\t});\r\n\t}\r\n\t //---- handle to save new userPosts data to localStorage\r\n \tsaveToLocaleStorage(newPostsData){\r\n  \t\tlocalStorage.setItem('userPosts',JSON.stringify(newPostsData));\r\n  \t}\r\n  \t//---  delete article from post\r\n  \t//---  save сhanged data to loclalStorage\r\n\thandleDeletePost=(e)=>{\r\n\t\tlet postId=e.target.id;\r\n\t\tlet newPostData=this.state.posts.filter(post=>post.id!=postId);\r\n\t\tthis.setState({posts:newPostData});\r\n\t\tthis.saveToLocaleStorage(newPostData);\r\n\t}\r\n\t//--- getting maximum number of article id\r\n\tgetMaxId(){\r\n\t\treturn Math.max(0,...this.state.posts.map(article=>Number(article.id)));\r\n\t}\r\n\t//---  updating posts when added new article \r\n\tcomponentDidUpdate(){\r\n\t\tlet newArticle=this.props.article;\r\n\t\t\tif(newArticle!==this.article){\r\n\t\t\t\tlet newPostData=this.state.posts;\r\n\t\t\t\tthis.article=newArticle;\r\n\t\t\t\t//--- add  id to last post article\r\n\t\t\t\tnewArticle.id=this.getMaxId()+1;\r\n\t\t\t\tnewPostData.push(newArticle);\r\n\t\t\t\tthis.setState({posts:newPostData});\r\n\t\t\t\tthis.saveToLocaleStorage(newPostData);\r\n\t\t\t}\r\n\t}\r\n\r\n\trender(){\r\n\t\t//--- generating articles to Wrapper\r\n\t\tlet wrapperAtricles=this.getArticles(this.state.posts);\r\n\t\treturn(\r\n\t\t\t   <Fragment>\r\n\t\t\t\t{wrapperAtricles}\r\n\t\t\t   </Fragment>\r\n\t\t\t);\r\n\t}\r\n}","import React from 'react';\r\nimport { Formik, Field, Form } from \"formik\";\r\n\r\nconst Fragment=React.Fragment;\r\n\r\nexport default function FormContainer(props){\r\n\r\nlet onSubmitHandle=(values)=>{\r\n\t\tlet newArticle={title:values.title,\r\n\t  \t\t\t\t \tbody:values.body,\r\n\t  \t\t\t\t \ttags:values.tags.split(', ')\r\n\t  \t\t\t\t   }\r\n\t\tprops.handleAddPost(newArticle);\r\n\t}\r\nreturn (\r\n\t\t<Fragment>\r\n\t\t    <Formik\r\n\t\t      //---инициализируем значения input-ов\r\n\t\t      initialValues={{title: \"\",body: \"\",tags: \"\"}}\r\n\t\t      //--- validation \r\n\t\t      validate={values => {\r\n\t\t        const errors = {};\r\n\t\t        //---  убираем пробелы\r\n\t\t\t\tvalues.title=values.title.trim();\r\n\t\t\t\tvalues.body=values.body.trim();\r\n\t\t\t\tvalues.tags=values.tags.trim();\r\n\t\t        \r\n\t\t        if(!values.title) {errors.title = 'Поле нужно заполнить!';} \r\n\t\t        else if(values.title.length>50) {errors.title = 'Должно быть не более 50 знаков!';}\r\n\t\t        if(!values.body) {errors.body = 'Поле нужно заполнить!';}\r\n\t\t        else if(values.body.length>150) {errors.body = 'Должно быть не более 150 знаков!';}\r\n\t\t        if(!values.tags) {errors.tags = 'Поле нужно заполнить!';}\r\n\t\t        else if(values.tags.length>50) {errors.tags = 'Должно быть не более 50 знаков!';}\r\n\t\t        return errors;\r\n\t\t      }}\r\n\t\t      //--- определяем, что будет происходить при вызове onsubmit\r\n\t\t      onSubmit={(values,{resetForm}) => {onSubmitHandle(values); resetForm();}}>\r\n\r\n\t\t      {({ errors, touched }) => (\r\n\t\t      \t//---свойство, где описывыем нашу форму\r\n\t\t      \t//---errors-ошибки валидации формы\r\n\t\t      \t//---touched-поля формы, которые мы \"затронули\",\r\n\t\t      \t//---то есть, в которых что-то ввели\r\n\t\t      \t<div id=\"post-add\" className=\"col-lg-4\">\r\n\t\t        <Form>\r\n\t\t\t        <div className=\"form-group\">\r\n\t\t\t          <Field name=\"title\" placeholder=\"Заголовок\" type=\"text\" className=\"form-control\"/>\r\n\t\t\t          {//---если в этом поле возникла ошибка и \r\n\t\t\t          //---если это поле \"затронуто, то выводим ошибку\r\n\t\t\t            errors.title &&\r\n\t\t\t            touched.title && \r\n\t\t\t            \t<div className=\"text-danger text-left bg-danger error\">{errors.title}</div>}\r\n\t\t\t        </div>\r\n\t\t\t        <div className=\"form-group\">\r\n\t\t\t          <Field name=\"body\" placeholder=\"текст\" type=\"text\" className=\"form-control\"/>\r\n\t\t\t          {errors.body &&\r\n\t\t\t            touched.body && (\r\n\t\t\t            \t<div className=\"text-danger text-left bg-danger error\">{errors.body}</div>\r\n\t\t\t            )}\r\n\t\t            </div>\r\n\t\t            <div className=\"form-group\">\r\n\t\t\t          \t<Field name=\"tags\" placeholder=\"тег, ещё тег\" type=\"text\" className=\"form-control\"/>\r\n\t\t\t         \t {errors.tags &&\r\n\t\t\t            \ttouched.tags && (\r\n\t\t\t            \t<div className=\"text-danger text-left bg-danger error\">{errors.tags}</div>\r\n\t\t\t            )}\r\n\t\t            </div>\r\n\t\t         <button type=\"submit\" className=\"btn btn-primary\">Добавить</button>\r\n\t\t        </Form>\r\n\t\t        </div>\r\n\t\t      )}\r\n\r\n\t\t    </Formik>\r\n\t\t</Fragment>\r\n  );\r\n}\r\n\r\n\r\n","import React from 'react';\nimport Posts from './Posts/Posts.jsx';\nimport FormContainer from './Form/FormContainer.jsx';\n\n\n\nconst Fragment=React.Fragment;\n\nexport default class App extends React.Component {\n\n  constructor(props){\n\t  super(props);\n\t  this.state={article:null}\n  }\t\n  //--- adding  new article to the posts\n  addArticle=(article)=>{\n  \tthis.setState({article})\n  }\n\n  render(){\n  \tlet article=this.state.article\n  \treturn (\n\t\t    <Fragment>\n\t\t       <section>\n\t\t\t        <div  id=\"posts\" className='well'>\n\t\t\t\t        <Posts article={article}\n\t\t\t\t        \t   handleSaveToLocaleStorage={this.handleSaveToLocaleStorage}/>\n\t\t\t\t    </div>\n\t\t\t\t    <FormContainer handleAddPost={this.addArticle}/>\n\t\t       </section>\n\t\t    </Fragment>\n\t\t  );\n  }  \n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}