{"version":3,"sources":["Posts/Atricle/Article.jsx","Posts/Posts.jsx","Form/FormContainer.jsx","App.jsx","index.js"],"names":["Fragment","React","Article","id","title","body","tags","handleDeletePost","className","map","tag","key","onClick","e","Posts","props","postId","target","newPostData","state","posts","filter","post","setState","saveToLocaleStorage","article","localStorage","getItem","setItem","JSON","stringify","postsArray","parse","newPostsData","this","Number","sort","a","b","pop","newArticle","getMaxId","push","wrapperAtricles","getArticles","Component","FormContainer","initialValues","validate","values","errors","length","onSubmit","resetForm","trim","split","handleAddPost","onSubmitHandle","touched","name","placeholder","type","App","addArticle","handleSaveToLocaleStorage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f090ac21.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nlet Fragment=React.Fragment;\r\n\r\nlet Article=({id,title,body,tags,handleDeletePost})=>{\r\n\r\n\treturn (\r\n\t\t\t <Fragment>\r\n\t\t\t\t<article> \r\n\t\t\t\t\t<header>\r\n\t\t\t\t\t\t<h3>{title}</h3>\r\n\t\t\t\t\t</header>\r\n\t\t\t\t\t<section>\r\n\t\t\t\t\t \t<p>{body}</p>\r\n\t\t\t\t\t</section>\r\n\t\t\t\t\t<footer>\r\n\t\t\t\t\t\t<div className=\"tags\">\r\n\t\t\t\t\t\t{tags.map((tag,id)=><button className=\"btn btn-xs btn-default\" key={id}>{tag}</button>)}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</footer>\r\n\t\t\t\t\t<div className=\"controls\">\r\n\t\t\t\t\t\t\t<button id={id} className=\"btn btn-danger btn-mini\" onClick={(e)=>handleDeletePost(e)}>Удалить</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</article>\r\n\t\t\t</Fragment>\r\n\t\t);\r\n};\r\n\r\nexport default Article","import React from 'react';\r\nimport Article from './Atricle/Article.jsx'\r\nimport postsArray from './posts.json';\r\n\r\n\r\n\r\nlet Fragment=React.Fragment;\r\nexport default class Posts extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.article=null;\r\n\t\t//----initialize LocalStorage with posts \r\n\t\t//--- if no data in localStorage, save data to localStorage from post.json file\r\n\t\tif(localStorage.getItem('userPosts')===null)\r\n\t\t  \t\tlocalStorage.setItem('userPosts',JSON.stringify(postsArray));\r\n\t\t//---- reading data from localStorage userPosts\r\n\t\tthis.state={posts:JSON.parse(localStorage.getItem('userPosts'))};\r\n\t\t// console.log('rerender');\r\n\t}\r\n\t//--- generating  new list of Articles  from newPostData\r\n\tgetArticles(newPostData){\r\n\t\treturn newPostData.map(post=>{\r\n\t\t\treturn(\r\n\t\t\t\t\t<Article  title={post.title}\r\n\t\t\t\t\t\t\t  key={post.id}\r\n\t\t\t\t\t\t\t  id={post.id}\r\n\t\t\t\t\t\t\t  body={post.body}\r\n\t\t\t\t\t\t\t  tags={post.tags}\r\n\t\t\t\t\t\t\t  handleDeletePost={this.handleDeletePost}/>\r\n\t\t\t\t)\r\n\t\t\t});\r\n\t}\r\n\t //---- handle to save new userPosts data to localStorage\r\n \tsaveToLocaleStorage(newPostsData){\r\n  \t\tlocalStorage.setItem('userPosts',JSON.stringify(newPostsData));\r\n  \t}\r\n  \t//---  delete article from post\r\n  \t//---  save ghanged data to loclalStorage\r\n\thandleDeletePost=(e)=>{\r\n\t\tlet postId=e.target.id;\r\n\t\tlet newPostData=this.state.posts.filter(post=>post.id!=postId);\r\n\t\tthis.setState({posts:newPostData});\r\n\t\tthis.saveToLocaleStorage(newPostData);\r\n\t}\r\n\t//--- getting maximum number of article id\r\n\tgetMaxId(){\r\n\t\tlet Ids=this.state.posts.map(article=>Number(article.id));\r\n\t\treturn Ids.sort((a,b)=>a-b).pop() || 0;\r\n\t}\r\n\t//---  updating posts when added new article \r\n\tcomponentDidUpdate(){\r\n\t\tlet newArticle=this.props.article;\r\n\t\t\tif(newArticle!==this.article){\r\n\t\t\t\tlet newPostData=this.state.posts;\r\n\t\t\t\tthis.article=newArticle;\r\n\t\t\t\t//--- add  id to last post article\r\n\t\t\t\tnewArticle.id=this.getMaxId()+1;\r\n\t\t\t\tnewPostData.push(newArticle);\r\n\r\n\t\t\t\tthis.setState({posts:newPostData});\r\n\t\t\t\tthis.saveToLocaleStorage(newPostData);\r\n\t\t\t}\r\n\t}\r\n\r\n\trender(){\r\n\t\t//--- generating articles to Wrapper\r\n\t\tlet wrapperAtricles=this.getArticles(this.state.posts);\r\n\t\treturn(\r\n\t\t\t   <Fragment>\r\n\t\t\t\t{wrapperAtricles}\r\n\t\t\t   </Fragment>\r\n\t\t\t);\r\n\t}\r\n}","import React from 'react';\r\nimport { Formik, Field, Form } from \"formik\";\r\n\r\n\r\nconst Fragment=React.Fragment;\r\n\r\nexport default function FormContainer(props){\r\n\r\nlet onSubmitHandle=(values)=>{\r\n\t\tlet newArticle={title:values.title.trim(),\r\n\t  \t\t\t\t \tbody:values.body.trim(),\r\n\t  \t\t\t\t \ttags:values.tags.trim().split(', ')\r\n\t  \t\t\t\t   }\r\n\t\tprops.handleAddPost(newArticle);\r\n\t}\r\nreturn (\r\n\t\t<Fragment>\r\n\t\t    <Formik\r\n\t\t      //---инициализируем значения input-ов\r\n\t\t      initialValues={{title: \"\",body: \"\",tags: \"\"}}\r\n\t\t      //--- validation \r\n\t\t      validate={values => {\r\n\t\t        const errors = {};\r\n\t\t        if(!values.title) {errors.title = 'Поле нужно заполнить!';} \r\n\t\t        else if(values.title.length>50) {errors.title = 'Должно быть не более 50 знаков!';}\r\n\t\t        if(!values.body) {errors.body = 'Поле нужно заполнить!';}\r\n\t\t        else if(values.body.length>150) {errors.body = 'Должно быть не более 150 знаков!';}\r\n\t\t        if(!values.tags) {errors.tags = 'Поле нужно заполнить!';}\r\n\t\t        else if(values.tags.length>50) {errors.tags = 'Должно быть не более 50 знаков!';}\r\n\t\t        return errors;\r\n\t\t      }}\r\n\t\t      //--- определяем, что будет происходить при вызове onsubmit\r\n\t\t      onSubmit={(values,{resetForm}) => {onSubmitHandle(values); resetForm();}}>\r\n\r\n\t\t      {({ errors, touched }) => (\r\n\t\t      \t//---свойство, где описывыем нашу форму\r\n\t\t      \t//---errors-ошибки валидации формы\r\n\t\t      \t//---touched-поля формы, которые мы \"затронули\",\r\n\t\t      \t//---то есть, в которых что-то ввели\r\n\t\t      \t<div id=\"post-add\" className=\"col-lg-4\">\r\n\t\t        <Form>\r\n\t\t\t        <div className=\"form-group\">\r\n\t\t\t          <Field name=\"title\" placeholder=\"Заголовок\" type=\"text\" className=\"form-control\"/>\r\n\t\t\t          {//---если в этом поле возникла ошибка и \r\n\t\t\t          //---если это поле \"затронуто, то выводим ошибку\r\n\t\t\t            errors.title &&\r\n\t\t\t            touched.title && \r\n\t\t\t            \t<div className=\"text-danger text-left bg-danger error\">{errors.title}</div>}\r\n\t\t\t        </div>\r\n\t\t\t        <div className=\"form-group\">\r\n\t\t\t          <Field name=\"body\" placeholder=\"текст\" type=\"text\" className=\"form-control\"/>\r\n\t\t\t          {errors.body &&\r\n\t\t\t            touched.body && (\r\n\t\t\t            \t<div className=\"text-danger text-left bg-danger error\">{errors.body}</div>\r\n\t\t\t            )}\r\n\t\t            </div>\r\n\t\t            <div className=\"form-group\">\r\n\t\t\t          \t<Field name=\"tags\" placeholder=\"тег, ещё тег\" type=\"text\" className=\"form-control\"/>\r\n\t\t\t         \t {errors.tags &&\r\n\t\t\t            \ttouched.tags && (\r\n\t\t\t            \t<div className=\"text-danger text-left bg-danger error\">{errors.tags}</div>\r\n\t\t\t            )}\r\n\t\t            </div>\r\n\t\t          <button type=\"submit\" className=\"btn btn-primary\">Добавить</button>\r\n\t\t        </Form>\r\n\t\t        </div>\r\n\t\t      )}\r\n\r\n\t\t    </Formik>\r\n\t\t</Fragment>\r\n  );\r\n}","import React from 'react';\nimport Posts from './Posts/Posts.jsx';\nimport FormContainer from './Form/FormContainer.jsx';\n\n\n\nlet Fragment=React.Fragment;\n\nexport default class App extends React.Component {\n\n  constructor(props){\n\t  super(props);\n\t  this.state={article:null}\n  }\t\n  //--- adding  new article to the posts\n  addArticle=(article)=>{\n  \tthis.setState({article})\n  }\n\n  render(){\n  \tlet article=this.state.article\n  \treturn (\n\t\t    <Fragment>\n\t\t       <section>\n\t\t\t        <div  id=\"posts\" className='well'>\n\t\t\t\t        <Posts article={article}\n\t\t\t\t        \t   handleSaveToLocaleStorage={this.handleSaveToLocaleStorage}/>\n\t\t\t\t    </div>\n\t\t\t\t    <FormContainer handleAddPost={this.addArticle}/>\n\t\t       </section>\n\t\t    </Fragment>\n\t\t  );\n  }  \n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}